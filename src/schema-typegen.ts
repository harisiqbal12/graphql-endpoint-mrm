/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context as Context } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AcknowledgePostInput: { // input type
    post_id: string; // String!
    user_id: string; // String!
  }
  CreateChatInput: { // input type
    greetings: string; // String!
    message: string; // String!
    regards: string; // String!
    senderId: string; // String!
  }
  CreateUserInput: { // input type
    age: number; // Int!
    email: string; // String!
    fullname: string; // String!
    image?: string | null; // String
    role: NexusGenEnums['UserRoleEnum']; // UserRoleEnum!
  }
}

export interface NexusGenEnums {
  ChatTypeEnum: "HOLIDAY" | "NOTIFICATION"
  UserRoleEnum: "EMPLOYEE" | "HR" | "OWNER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Chat: { // root type
    createdAt: string; // String!
    greetings: string; // String!
    id: string; // String!
    message: string; // String!
    regards: string; // String!
    sender_id: string; // String!
    type: NexusGenEnums['ChatTypeEnum']; // ChatTypeEnum!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    age: number; // Int!
    createdAt: string; // String!
    email: string; // String!
    fullname: string; // String!
    id: string; // String!
    image?: string | null; // String
    role: NexusGenEnums['UserRoleEnum']; // UserRoleEnum!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Chat: { // field return type
    Acknowledgements: NexusGenRootTypes['User'][] | null; // [User!]
    Sender: NexusGenRootTypes['User'] | null; // User
    createdAt: string; // String!
    greetings: string; // String!
    id: string; // String!
    message: string; // String!
    regards: string; // String!
    sender_id: string; // String!
    type: NexusGenEnums['ChatTypeEnum']; // ChatTypeEnum!
  }
  Mutation: { // field return type
    acknowledgePost: NexusGenRootTypes['Chat']; // Chat!
    createPost: NexusGenRootTypes['Chat'] | null; // Chat
    createUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    allPostsAsc: NexusGenRootTypes['Chat'][] | null; // [Chat!]
    posts: NexusGenRootTypes['Chat'][] | null; // [Chat!]
    uniqueUser: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][] | null; // [User!]
  }
  User: { // field return type
    age: number; // Int!
    createdAt: string; // String!
    email: string; // String!
    fullname: string; // String!
    id: string; // String!
    image: string | null; // String
    role: NexusGenEnums['UserRoleEnum']; // UserRoleEnum!
  }
}

export interface NexusGenFieldTypeNames {
  Chat: { // field return type name
    Acknowledgements: 'User'
    Sender: 'User'
    createdAt: 'String'
    greetings: 'String'
    id: 'String'
    message: 'String'
    regards: 'String'
    sender_id: 'String'
    type: 'ChatTypeEnum'
  }
  Mutation: { // field return type name
    acknowledgePost: 'Chat'
    createPost: 'Chat'
    createUser: 'User'
  }
  Query: { // field return type name
    allPostsAsc: 'Chat'
    posts: 'Chat'
    uniqueUser: 'User'
    users: 'User'
  }
  User: { // field return type name
    age: 'Int'
    createdAt: 'String'
    email: 'String'
    fullname: 'String'
    id: 'String'
    image: 'String'
    role: 'UserRoleEnum'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    acknowledgePost: { // args
      input: NexusGenInputs['AcknowledgePostInput']; // AcknowledgePostInput!
    }
    createPost: { // args
      input: NexusGenInputs['CreateChatInput']; // CreateChatInput!
    }
    createUser: { // args
      input: NexusGenInputs['CreateUserInput']; // CreateUserInput!
    }
  }
  Query: {
    uniqueUser: { // args
      email: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}